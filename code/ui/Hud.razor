@using Sandbox;
@using Sandbox.UI;
@using static GeneralGame.Hud;
@inherits PanelComponent
@namespace GeneralGame

<root>
	<div class="generalinfo">
		<div class="sides">
			<div class="zombies_count">
				üíÄ Zombies: @(zmains())
			</div>
			<div class="human_count">
				‚ù§Ô∏è Humans: @(hmains())
			</div>
		</div>
		<div class="playerinfo">
			<div class="player_points">
				Points: @(playerController.points)
			</div>
		</div>
	</div>
	@if(playerController.Side == Side.UNDEAD) {
		<div class="zombie_state">
			<HealthBar Current=@playerController.Health Max=@playerController.MaxHealth > </HealthBar>
		</div>	
	}
	@if (playerController.Side == Side.HUMAN) {
		<div class="human_state">
			<HealthBar Current=@playerController.Health Max=@playerController.MaxHealth> </HealthBar>
		</div>
	}
	
	
	@{
		var dep = playerController.Weapons.Deployed;
	}
	@if (dep is not null)
	{
		if (dep is BaseMele)
		{
			<div class="weapon_info">
				<div class="stamina">Stamina: @(MathX.FloorToInt(playerController.stamina))</div>
				@if((dep as BaseMele).ammoType != AmmoType.NONE) {
					<div class="ammo">
						@{
							var amount = playerController.Ammo.Get((dep as BaseMele).ammoType);
							var type = (dep as BaseMele).ammoType.ToString();
						}
						@(type)(s): @(amount)
					</div>
				}
			</div>
		}
		if (dep is BaseGun)
		{
			<div class="weapon_info">
				<div>@(((BaseGun) dep).AmmoInClip) / @(((BaseGun) dep).ClipSize)</div>
				<div>Total: @(playerController.Ammo.Get((dep as BaseGun).AmmoType) + " " + WeaponComponent.toRealisticAmmoType((dep as BaseGun).AmmoType))</div>
			</div>
		}
	}
</root>

@code
{
	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( RealTime.Now );
	PlayerController playerController;
	protected override void OnEnabled()
	{
		base.OnEnabled();
		playerController = GameObject.Components.GetInAncestors<PlayerController>();


	}
	protected override void OnUpdate()
	{
		base.OnUpdate();

		if (IsProxy)
			GameObject.Enabled = false;
	}

	public int zmains() {
		int zmainers = 0;

		Scene.Children.ForEach( (ob) => {
			if (ob.Tags.Has("zombie")) {
				zmainers++;
			}
		} );
		return zmainers;
	}

	public int hmains() {
		int hmainers = 0;
		Scene.Children.ForEach( (ob) => {
			if (ob.Tags.Has("human")) {
				hmainers++;
			}
		} );
		return hmainers;
	}
}
